{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "description": "Configuration to load data, apply transformations, and export to one or multiple destinations.",
  "type": "object",
  "required": [
    "source"
  ],
  "properties": {
    "exports": {
      "description": "Export destinations for the transformed data.",
      "default": [],
      "type": "array",
      "items": {
        "$ref": "#/definitions/ExportItem"
      }
    },
    "source": {
      "description": "The top-level source that data should be loaded from.",
      "allOf": [
        {
          "$ref": "#/definitions/Loader"
        }
      ]
    },
    "transforms": {
      "description": "Transformations to apply to the data loaded from the source.",
      "default": [],
      "type": "array",
      "items": {
        "$ref": "#/definitions/TransformItem"
      }
    }
  },
  "definitions": {
    "Alias": {
      "description": "Name a column using the given alias.",
      "type": "string"
    },
    "And": {
      "description": "Chain an expression into a logical AND with conditions on one or more columns.",
      "allOf": [
        {
          "$ref": "#/definitions/ColMap"
        }
      ]
    },
    "ColMap": {
      "type": [
        "object",
        "array"
      ],
      "items": {
        "type": "array",
        "items": [
          {
            "$ref": "#/definitions/Column"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OpItem"
            }
          }
        ],
        "maxItems": 2,
        "minItems": 2
      }
    },
    "Column": {
      "description": "Specify a column by name (equivalent to [`polars::prelude::col`]).",
      "type": "string"
    },
    "ConfigSource": {
      "description": "Import another configuration file to be used as a data source.",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "description": "Path to the configuration file.",
          "type": "string"
        }
      }
    },
    "Contains": {
      "description": "Check if values contain the given regex.",
      "type": "string"
    },
    "CsvSource": {
      "description": "Load data from CSV.",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "has_header": {
          "description": "Whether or not files have headers.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "path": {
          "description": "The path to load files from. This path is passed directly to [`LazyCsvReader`], so paths with globs are permissible (e.g. `./files/*.csv`).",
          "type": "string"
        },
        "schema": {
          "description": "Optional [`polars::prelude::Schema`] to enforce specific datatypes.",
          "anyOf": [
            {
              "$ref": "#/definitions/Schema"
            },
            {
              "type": "null"
            }
          ]
        },
        "separator": {
          "description": "Separator to use when parsing.",
          "anyOf": [
            {
              "$ref": "#/definitions/Separator"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "DropDuplicates": {
      "description": "Filter out duplicate rows.",
      "type": "object",
      "properties": {
        "keep": {
          "description": "Which duplicate record (if any) to keep.",
          "default": "any",
          "allOf": [
            {
              "$ref": "#/definitions/DuplicateKeep"
            }
          ]
        },
        "subset": {
          "description": "Columns to check for duplicate values (defaults to all columns).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DuplicateKeep": {
      "description": "Which duplicate rows to keep to keep when dropping duplicates from data.",
      "oneOf": [
        {
          "description": "Keep the first duplicate record.",
          "type": "string",
          "enum": [
            "first"
          ]
        },
        {
          "description": "Keep the last duplicate record.",
          "type": "string",
          "enum": [
            "last"
          ]
        },
        {
          "description": "Keep any duplicate row. This allows for more optimization but makes no guarantees about which row will be kept.",
          "type": "string",
          "enum": [
            "any"
          ]
        },
        {
          "description": "Do not keep any duplicate rows.",
          "type": "string",
          "enum": [
            "none"
          ]
        }
      ]
    },
    "ExportItem": {
      "description": "Available exports that can be used in configuration files.",
      "oneOf": [
        {
          "description": "Export data to CSV.",
          "type": "object",
          "required": [
            "folder",
            "name",
            "type"
          ],
          "properties": {
            "date_format": {
              "description": "Optional format string to append the current time to the filename - refer to <https://docs.rs/chrono/latest/chrono/format/strftime/index.html> for available format codes.",
              "type": [
                "string",
                "null"
              ]
            },
            "folder": {
              "description": "Folder in which to create files.",
              "type": "string"
            },
            "name": {
              "description": "Name of the output file, not including the file extension.",
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "csv"
              ]
            }
          }
        }
      ]
    },
    "Extract": {
      "description": "Extract capture groups from a regex into separate columns.",
      "type": "object",
      "required": [
        "column",
        "pattern"
      ],
      "properties": {
        "column": {
          "description": "Column to apply pattern to.",
          "type": "string"
        },
        "filter": {
          "default": false,
          "type": "boolean"
        },
        "pattern": {
          "description": "Pattern to match against the column.",
          "type": "string"
        }
      }
    },
    "ExtractGroups": {
      "description": "Extract the capture groups of a regex from the given column.",
      "type": "string"
    },
    "Filter": {
      "description": "Filter rows using a mapping of columns to operations to apply, which must yield boolean values.",
      "allOf": [
        {
          "$ref": "#/definitions/ColMap"
        }
      ]
    },
    "IsNull": {
      "description": "Check if values are null.",
      "type": "boolean"
    },
    "Join": {
      "description": "Transform data by joining it with data from another source.",
      "type": "object",
      "required": [
        "how",
        "left_on",
        "right",
        "right_on"
      ],
      "properties": {
        "how": {
          "description": "Join method to use.",
          "allOf": [
            {
              "$ref": "#/definitions/JoinType"
            }
          ]
        },
        "left_on": {
          "description": "The column in the left-hand dataset to join on.",
          "type": "string"
        },
        "right": {
          "description": "The right-hand dataset to join the input with.",
          "allOf": [
            {
              "$ref": "#/definitions/Loader"
            }
          ]
        },
        "right_on": {
          "description": "The column in the right-hand dataset to join on.",
          "type": "string"
        }
      }
    },
    "JoinType": {
      "description": "The method by which to join datasets. Maps to [`polars::prelude::JoinType`].",
      "oneOf": [
        {
          "description": "Inner join - keep only rows that match on both sides.",
          "type": "string",
          "enum": [
            "inner"
          ]
        },
        {
          "description": "Left join - keep all rows from the left dataset.",
          "type": "string",
          "enum": [
            "left"
          ]
        },
        {
          "description": "Right join - keep all rows from the right dataset.",
          "type": "string",
          "enum": [
            "right"
          ]
        },
        {
          "description": "Full join - keep all rows from both datasets.",
          "type": "string",
          "enum": [
            "full"
          ]
        }
      ]
    },
    "Loader": {
      "description": "Load data from a given source and apply optional transformations.",
      "type": "object",
      "oneOf": [
        {
          "description": "Load data from CSV.",
          "type": "object",
          "required": [
            "csv"
          ],
          "properties": {
            "csv": {
              "$ref": "#/definitions/CsvSource"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Load data from another `retl` configuration file.",
          "type": "object",
          "required": [
            "config"
          ],
          "properties": {
            "config": {
              "$ref": "#/definitions/ConfigSource"
            }
          },
          "additionalProperties": false
        }
      ],
      "properties": {
        "transforms": {
          "description": "Which transformations, if any, to apply to the data before returning it.",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransformItem"
          }
        }
      }
    },
    "OpItem": {
      "description": "Possible operations that can be applied to an expression (i.e. [`polars::prelude::Expr`]).",
      "oneOf": [
        {
          "description": "Extract the capture groups of a regex from the given column.",
          "type": "object",
          "required": [
            "extract_groups"
          ],
          "properties": {
            "extract_groups": {
              "$ref": "#/definitions/ExtractGroups"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Name a column using the given alias.",
          "type": "object",
          "required": [
            "alias"
          ],
          "properties": {
            "alias": {
              "$ref": "#/definitions/Alias"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Check if values contain the given regex.",
          "type": "object",
          "required": [
            "contains"
          ],
          "properties": {
            "contains": {
              "$ref": "#/definitions/Contains"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Check if values are null.",
          "type": "object",
          "required": [
            "is_null"
          ],
          "properties": {
            "is_null": {
              "$ref": "#/definitions/IsNull"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Chain an expression into a logical OR with conditions on one or more columns.",
          "type": "object",
          "required": [
            "or"
          ],
          "properties": {
            "or": {
              "$ref": "#/definitions/Or"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Chain an expression into a logical AND with conditions on one or more columns.",
          "type": "object",
          "required": [
            "and"
          ],
          "properties": {
            "and": {
              "$ref": "#/definitions/And"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Or": {
      "description": "Chain an expression into a logical OR with conditions on one or more columns.",
      "allOf": [
        {
          "$ref": "#/definitions/ColMap"
        }
      ]
    },
    "Rename": {
      "description": "Rename columns.",
      "oneOf": [
        {
          "description": "Rename using a direct mapping of old names to new.",
          "type": "object",
          "required": [
            "map"
          ],
          "properties": {
            "map": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Schema": true,
    "Select": {
      "description": "Select columns with the applied operations. Wraps [`polars::lazy::prelude::LazyFrame::select`].",
      "allOf": [
        {
          "$ref": "#/definitions/ColMap"
        }
      ]
    },
    "Separator": {
      "description": "A valid ASCII CSV separator, represented internally as a [`u8`].",
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "Sort": {
      "description": "Sort a column ascending or descending.",
      "type": "object",
      "required": [
        "column"
      ],
      "properties": {
        "column": {
          "type": "string"
        },
        "descending": {
          "default": false,
          "type": "boolean"
        }
      }
    },
    "SortBy": {
      "description": "Sort the data by one or more columns.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Sort"
      }
    },
    "TransformItem": {
      "description": "Available transformations that can be used in configuration files.",
      "oneOf": [
        {
          "description": "Select columns (equivalent to [`LazyFrame::select`])",
          "type": "object",
          "required": [
            "select"
          ],
          "properties": {
            "select": {
              "$ref": "#/definitions/Select"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Rename columns (equivalent to [`LazyFrame::rename`])",
          "type": "object",
          "required": [
            "rename"
          ],
          "properties": {
            "rename": {
              "$ref": "#/definitions/Rename"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Filter columns (equivalent to [`LazyFrame::filter`])",
          "type": "object",
          "required": [
            "filter"
          ],
          "properties": {
            "filter": {
              "$ref": "#/definitions/Filter"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Extract capture groups of a regex into separate columns.",
          "type": "object",
          "required": [
            "extract"
          ],
          "properties": {
            "extract": {
              "$ref": "#/definitions/Extract"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Apply [`LazyFrame::unnest`] to the given struct columns.",
          "type": "object",
          "required": [
            "unnest"
          ],
          "properties": {
            "unnest": {
              "$ref": "#/definitions/Unnest"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Sort the data by one or more columns.",
          "type": "object",
          "required": [
            "sort_by"
          ],
          "properties": {
            "sort_by": {
              "$ref": "#/definitions/SortBy"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Drop duplicate rows from the dataset.",
          "type": "object",
          "required": [
            "drop_duplicates"
          ],
          "properties": {
            "drop_duplicates": {
              "$ref": "#/definitions/DropDuplicates"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Join the dataset with another dataset.",
          "type": "object",
          "required": [
            "join"
          ],
          "properties": {
            "join": {
              "$ref": "#/definitions/Join"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Unnest": {
      "description": "Apply [`polars::lazy::prelude::LazyFrame::unnest`] to the given struct columns.",
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  }
}