{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "description": "Configuration to load data, apply transformations, and export to one or multiple destinations.",
  "type": "object",
  "required": [
    "source"
  ],
  "properties": {
    "exports": {
      "description": "Export destinations for the transformed data.",
      "default": [],
      "type": "array",
      "items": {
        "$ref": "#/definitions/ExportItem"
      }
    },
    "source": {
      "description": "The top-level source that data should be loaded from.",
      "allOf": [
        {
          "$ref": "#/definitions/Loader"
        }
      ]
    },
    "transforms": {
      "description": "Transformations to apply to the data loaded from the source.",
      "default": [],
      "type": "array",
      "items": {
        "$ref": "#/definitions/TransformItem"
      }
    }
  },
  "definitions": {
    "Add": {
      "$ref": "#/definitions/ExpressionChain"
    },
    "Alias": {
      "description": "Name a column using the given alias.",
      "type": "string"
    },
    "Ambiguous": {
      "type": "string",
      "enum": [
        "raise",
        "earliest",
        "latest",
        "null"
      ]
    },
    "And": {
      "description": "Logical AND against two or more conditions.",
      "type": "object",
      "required": [
        "conditions"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions to combine.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExpressionItem"
          }
        }
      }
    },
    "And2": {
      "description": "Chain an expression into a logical AND with conditions on one or more columns.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ExpressionChain"
      }
    },
    "AsStruct": {
      "description": "Combine one or more expressions into a struct column as fields.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ExpressionChain"
      }
    },
    "Cast": {
      "$ref": "#/definitions/DataType"
    },
    "Column": {
      "description": "Specify a column by name (equivalent to [`polars::prelude::col`]).",
      "type": "string"
    },
    "ConcatStr": {
      "description": "Concatenate string expressions horizontally.",
      "type": "object",
      "required": [
        "columns",
        "ignore_nulls",
        "separator"
      ],
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExpressionChain"
          }
        },
        "ignore_nulls": {
          "type": "boolean"
        },
        "separator": {
          "type": "string"
        }
      }
    },
    "ConfigSource": {
      "description": "Import another configuration file to be used as a data source.",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "description": "Path to the configuration file.",
          "allOf": [
            {
              "$ref": "#/definitions/String"
            }
          ]
        }
      }
    },
    "Contains": {
      "description": "Check if values contain the given regex.",
      "type": "string"
    },
    "CsvSource": {
      "description": "Load data from CSV.",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "has_header": {
          "description": "Whether or not files have headers.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "path": {
          "description": "The path to load files from. This path is passed directly to [`LazyCsvReader`], so paths with globs are permissible (e.g. `./files/*.csv`).",
          "allOf": [
            {
              "$ref": "#/definitions/String"
            }
          ]
        },
        "schema": {
          "description": "Optional [`polars::prelude::Schema`] to enforce specific datatypes.",
          "anyOf": [
            {
              "$ref": "#/definitions/Schema"
            },
            {
              "type": "null"
            }
          ]
        },
        "separator": {
          "description": "Separator to use when parsing.",
          "anyOf": [
            {
              "$ref": "#/definitions/Separator"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "DataType": true,
    "Div": {
      "description": "Divide the expression by another.",
      "allOf": [
        {
          "$ref": "#/definitions/ExpressionChain"
        }
      ]
    },
    "Drop": {
      "description": "Select a series of expressions with applied operations. Wraps [`polars::lazy::prelude::LazyFrame::select`].",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ExpressionChain"
      }
    },
    "DropDuplicates": {
      "description": "Filter out duplicate rows.",
      "type": "object",
      "properties": {
        "keep": {
          "description": "Which duplicate record (if any) to keep.",
          "default": "any",
          "allOf": [
            {
              "$ref": "#/definitions/DuplicateKeep"
            }
          ]
        },
        "subset": {
          "description": "Columns to check for duplicate values (defaults to all columns).",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DuplicateKeep": {
      "description": "Which duplicate rows to keep to keep when dropping duplicates from data.",
      "oneOf": [
        {
          "description": "Keep the first duplicate record.",
          "type": "string",
          "enum": [
            "first"
          ]
        },
        {
          "description": "Keep the last duplicate record.",
          "type": "string",
          "enum": [
            "last"
          ]
        },
        {
          "description": "Keep any duplicate row. This allows for more optimization but makes no guarantees about which row will be kept.",
          "type": "string",
          "enum": [
            "any"
          ]
        },
        {
          "description": "Do not keep any duplicate rows.",
          "type": "string",
          "enum": [
            "none"
          ]
        }
      ]
    },
    "Eq": {
      "description": "Filter rows that are equal to the given expression.",
      "allOf": [
        {
          "$ref": "#/definitions/ExpressionChain"
        }
      ]
    },
    "ExportItem": {
      "description": "Available exports that can be used in configuration files.",
      "oneOf": [
        {
          "description": "Export data to CSV.",
          "type": "object",
          "required": [
            "folder",
            "name",
            "type"
          ],
          "properties": {
            "date_format": {
              "description": "Optional format string to append the current time to the filename - refer to <https://docs.rs/chrono/latest/chrono/format/strftime/index.html> for available format codes.",
              "type": [
                "string",
                "null"
              ]
            },
            "folder": {
              "description": "Folder in which to create files.",
              "type": "string"
            },
            "name": {
              "description": "Name of the output file, not including the file extension.",
              "type": "string"
            },
            "sink": {
              "description": "Whether to lazily sink data to the CSV. Defaults to true. Set to false if necessary to resolve errors. If set to false, all data will be loaded into memory as a [`polars::prelude::DataFrame`] before being written to disk.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "csv"
              ]
            }
          }
        },
        {
          "description": "Export data to newline-delimited JSON.",
          "type": "object",
          "required": [
            "folder",
            "name",
            "type"
          ],
          "properties": {
            "date_format": {
              "description": "Optional format string to append the current time to the filename - refer to <https://docs.rs/chrono/latest/chrono/format/strftime/index.html> for available format codes.",
              "type": [
                "string",
                "null"
              ]
            },
            "folder": {
              "description": "Folder in which to create files.",
              "type": "string"
            },
            "name": {
              "description": "Name of the output file, not including the file extension.",
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "nd_json"
              ]
            }
          }
        },
        {
          "description": "Collect and serialize the dataframe itself to a single JSON object. You probably don't need this.",
          "type": "object",
          "required": [
            "folder",
            "name",
            "type"
          ],
          "properties": {
            "date_format": {
              "description": "Optional format string to append the current time to the filename - refer to <https://docs.rs/chrono/latest/chrono/format/strftime/index.html> for available format codes.",
              "type": [
                "string",
                "null"
              ]
            },
            "folder": {
              "description": "Folder in which to create files.",
              "type": "string"
            },
            "name": {
              "description": "Name of the output file, not including the file extension.",
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "json"
              ]
            }
          }
        }
      ]
    },
    "ExpressionChain": {
      "description": "An expression grouped together with chained operations.",
      "type": "object",
      "required": [
        "expr"
      ],
      "properties": {
        "expr": {
          "$ref": "#/definitions/ExpressionItem"
        },
        "ops": {
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/OpItem"
          }
        }
      }
    },
    "ExpressionItem": {
      "description": "Available expressions that can be used in configuration files.",
      "oneOf": [
        {
          "description": "Specify a column by name (equivalent to [`col`]).",
          "type": "object",
          "required": [
            "col"
          ],
          "properties": {
            "col": {
              "$ref": "#/definitions/Column"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Match a regex against a column (equivalent to `col(...).str().contains(...)`).",
          "type": "object",
          "required": [
            "match"
          ],
          "properties": {
            "match": {
              "$ref": "#/definitions/Match"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Group 2+ items together in a logical AND statement.",
          "type": "object",
          "required": [
            "and"
          ],
          "properties": {
            "and": {
              "$ref": "#/definitions/And"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Group 2+ items together in a logical OR statement.",
          "type": "object",
          "required": [
            "or"
          ],
          "properties": {
            "or": {
              "$ref": "#/definitions/Or"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Specify a literal string value (equivalent to [`lit`]).",
          "type": "object",
          "required": [
            "lit"
          ],
          "properties": {
            "lit": {
              "$ref": "#/definitions/Literal"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Literal null value.",
          "type": "string",
          "enum": [
            "null"
          ]
        },
        {
          "description": "Evaluates to the number of rows.",
          "type": "string",
          "enum": [
            "len"
          ]
        },
        {
          "description": "Combine one or more expressions into a struct column as fields.",
          "type": "object",
          "required": [
            "as_struct"
          ],
          "properties": {
            "as_struct": {
              "$ref": "#/definitions/AsStruct"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Generate a range of integers.",
          "type": "object",
          "required": [
            "int_range"
          ],
          "properties": {
            "int_range": {
              "$ref": "#/definitions/IntRange"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Concatenate string expressions horizontally.",
          "type": "object",
          "required": [
            "concat_str"
          ],
          "properties": {
            "concat_str": {
              "$ref": "#/definitions/ConcatStr"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Extract": {
      "description": "Extract capture groups from a regex into separate columns.",
      "type": "object",
      "required": [
        "column",
        "pattern"
      ],
      "properties": {
        "column": {
          "description": "Column to apply pattern to.",
          "type": "string"
        },
        "filter": {
          "default": false,
          "type": "boolean"
        },
        "pattern": {
          "description": "Pattern to match against the column.",
          "type": "string"
        }
      }
    },
    "ExtractGroups": {
      "description": "Extract the capture groups of a regex from the given column.",
      "type": "string"
    },
    "FillNull": {
      "description": "Fill in null values with a given expression.",
      "allOf": [
        {
          "$ref": "#/definitions/ExpressionChain"
        }
      ]
    },
    "Filter": {
      "description": "Filter rows that match the given expressions, which must yield boolean values.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ExpressionChain"
      }
    },
    "GtEq": {
      "description": "Filter rows that are greater than or equal to the given expression.",
      "allOf": [
        {
          "$ref": "#/definitions/ExpressionChain"
        }
      ]
    },
    "InlineSource": true,
    "IntRange": {
      "description": "Generate a range of integers.",
      "type": "object",
      "required": [
        "dtype",
        "start",
        "step"
      ],
      "properties": {
        "dtype": {
          "$ref": "#/definitions/DataType"
        },
        "start": {
          "type": "integer",
          "format": "int64"
        },
        "step": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "IsNull": {
      "description": "Check if values are null.",
      "type": "boolean"
    },
    "Join": {
      "description": "Transform data by joining it with data from another source.",
      "type": "object",
      "required": [
        "how",
        "left_on",
        "right",
        "right_on"
      ],
      "properties": {
        "how": {
          "description": "Join method to use.",
          "allOf": [
            {
              "$ref": "#/definitions/JoinType"
            }
          ]
        },
        "left_on": {
          "description": "The column in the left-hand dataset to join on.",
          "type": "string"
        },
        "right": {
          "description": "The right-hand dataset to join the input with.",
          "allOf": [
            {
              "$ref": "#/definitions/Loader"
            }
          ]
        },
        "right_on": {
          "description": "The column in the right-hand dataset to join on.",
          "type": "string"
        }
      }
    },
    "JoinType": {
      "description": "The method by which to join datasets. Maps to [`polars::prelude::JoinType`].",
      "oneOf": [
        {
          "description": "Inner join - keep only rows that match on both sides.",
          "type": "string",
          "enum": [
            "inner"
          ]
        },
        {
          "description": "Left join - keep all rows from the left dataset.",
          "type": "string",
          "enum": [
            "left"
          ]
        },
        {
          "description": "Right join - keep all rows from the right dataset.",
          "type": "string",
          "enum": [
            "right"
          ]
        },
        {
          "description": "Full join - keep all rows from both datasets.",
          "type": "string",
          "enum": [
            "full"
          ]
        }
      ]
    },
    "JsonLineSource": {
      "description": "Load data from newline-delimited JSON files.",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "description": "The path to load files from. This path is passed directly to [`LazyJsonLineReader`], so paths with globs are permissible (e.g. `./files/*.csv`).",
          "allOf": [
            {
              "$ref": "#/definitions/String"
            }
          ]
        },
        "schema": {
          "description": "Optional [`polars::prelude::Schema`] to enforce specific datatypes.",
          "anyOf": [
            {
              "$ref": "#/definitions/Schema"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "JsonSource": {
      "description": "Load data from a JSON file.",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "description": "The path to load files from. This path is passed directly to [`LazyJsonLineReader`], so paths with globs are permissible (e.g. `./files/*.csv`).",
          "allOf": [
            {
              "$ref": "#/definitions/String"
            }
          ]
        },
        "schema": {
          "description": "Optional [`polars::prelude::Schema`] to enforce specific datatypes.",
          "anyOf": [
            {
              "$ref": "#/definitions/Schema"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "List": {
      "description": "Apply a `list`-namespaced operation.",
      "oneOf": [
        {
          "description": "Join a list column with a string separator.",
          "type": "object",
          "required": [
            "join"
          ],
          "properties": {
            "join": {
              "$ref": "#/definitions/ExpressionChain"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Literal": {
      "description": "Specify a literal value (equivalent to [`polars::prelude::lit`]).",
      "type": "string"
    },
    "Loader": {
      "description": "Load data from a given source and apply optional transformations.",
      "type": "object",
      "oneOf": [
        {
          "description": "Load data from CSV.",
          "type": "object",
          "required": [
            "csv"
          ],
          "properties": {
            "csv": {
              "$ref": "#/definitions/CsvSource"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Load data from newline-delimited JSON files.",
          "type": "object",
          "required": [
            "json_line"
          ],
          "properties": {
            "json_line": {
              "$ref": "#/definitions/JsonLineSource"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Load data from a JSON file.",
          "type": "object",
          "required": [
            "json"
          ],
          "properties": {
            "json": {
              "$ref": "#/definitions/JsonSource"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Load data from another `retl` configuration file.",
          "type": "object",
          "required": [
            "config"
          ],
          "properties": {
            "config": {
              "$ref": "#/definitions/ConfigSource"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Load data from a .parquet file.",
          "type": "object",
          "required": [
            "parquet"
          ],
          "properties": {
            "parquet": {
              "$ref": "#/definitions/ParquetSource"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Experimental source for inlining a dataframe, used for mapping columns from one set of values to another via joins. Example: ```toml [source.inline]\n\n[[source.inline.columns]] name     = \"title\" datatype = \"String\" values   = [\"Foo\", \"Bar\", \"Baz\"]\n\n[[source.inline.columns]] name     = \"number\" datatype = \"UInt64\" values   = [1, 2, 3] ```",
          "type": "object",
          "required": [
            "inline"
          ],
          "properties": {
            "inline": {
              "$ref": "#/definitions/InlineSource"
            }
          },
          "additionalProperties": false
        }
      ],
      "properties": {
        "transforms": {
          "description": "Which transformations, if any, to apply to the data before returning it.",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransformItem"
          }
        }
      }
    },
    "LtEq": {
      "description": "Filter rows that are less than or equal to the given expression.",
      "allOf": [
        {
          "$ref": "#/definitions/ExpressionChain"
        }
      ]
    },
    "Match": {
      "description": "Match a column against a regex.",
      "type": "object",
      "required": [
        "column",
        "pattern"
      ],
      "properties": {
        "column": {
          "description": "Column to apply pattern to.",
          "type": "string"
        },
        "pattern": {
          "description": "Pattern to match against the column.",
          "type": "string"
        }
      }
    },
    "Mul": {
      "description": "Multiply the expression by another.",
      "allOf": [
        {
          "$ref": "#/definitions/ExpressionChain"
        }
      ]
    },
    "OpItem": {
      "description": "Possible operations that can be applied to an expression (i.e. [`polars::prelude::Expr`]).",
      "oneOf": [
        {
          "description": "Extract the capture groups of a regex from the given column.",
          "type": "object",
          "required": [
            "extract_groups"
          ],
          "properties": {
            "extract_groups": {
              "$ref": "#/definitions/ExtractGroups"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Name a column using the given alias.",
          "type": "object",
          "required": [
            "alias"
          ],
          "properties": {
            "alias": {
              "$ref": "#/definitions/Alias"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Check if values contain the given regex.",
          "type": "object",
          "required": [
            "contains"
          ],
          "properties": {
            "contains": {
              "$ref": "#/definitions/Contains"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Check if values are null.",
          "type": "object",
          "required": [
            "is_null"
          ],
          "properties": {
            "is_null": {
              "$ref": "#/definitions/IsNull"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Chain an expression into a logical OR with conditions on one or more columns.",
          "type": "object",
          "required": [
            "or"
          ],
          "properties": {
            "or": {
              "$ref": "#/definitions/Or2"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Chain an expression into a logical AND with conditions on one or more columns.",
          "type": "object",
          "required": [
            "and"
          ],
          "properties": {
            "and": {
              "$ref": "#/definitions/And2"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Fill in null values in a column with an expression.",
          "type": "object",
          "required": [
            "fill_null"
          ],
          "properties": {
            "fill_null": {
              "$ref": "#/definitions/FillNull"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Apply a `str`-namespaced operation.",
          "type": "object",
          "required": [
            "str"
          ],
          "properties": {
            "str": {
              "$ref": "#/definitions/Str"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Filter rows that are equal to the given expression.",
          "type": "object",
          "required": [
            "eq"
          ],
          "properties": {
            "eq": {
              "$ref": "#/definitions/Eq"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Filter rows that are greater than or equal to the given expression.",
          "type": "object",
          "required": [
            "gt_eq"
          ],
          "properties": {
            "gt_eq": {
              "$ref": "#/definitions/GtEq"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Filter rows that are less than or equal to the given expression.",
          "type": "object",
          "required": [
            "lt_eq"
          ],
          "properties": {
            "lt_eq": {
              "$ref": "#/definitions/LtEq"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Apply a `list`-namespaced operation.",
          "type": "object",
          "required": [
            "list"
          ],
          "properties": {
            "list": {
              "$ref": "#/definitions/List"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "div"
          ],
          "properties": {
            "div": {
              "$ref": "#/definitions/Div"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "mul"
          ],
          "properties": {
            "mul": {
              "$ref": "#/definitions/Mul"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "add"
          ],
          "properties": {
            "add": {
              "$ref": "#/definitions/Add"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "sub"
          ],
          "properties": {
            "sub": {
              "$ref": "#/definitions/Sub"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cast"
          ],
          "properties": {
            "cast": {
              "$ref": "#/definitions/Cast"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "struct"
          ],
          "properties": {
            "struct": {
              "$ref": "#/definitions/Struct"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Or": {
      "description": "Logical OR against two or more conditions.",
      "type": "object",
      "required": [
        "conditions"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions to combine.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExpressionItem"
          }
        }
      }
    },
    "Or2": {
      "description": "Chain an expression into a logical OR with conditions on one or more columns.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ExpressionChain"
      }
    },
    "ParquetSource": {
      "description": "Import another configuration file to be used as a data source.",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "description": "Path to the configuration file.",
          "allOf": [
            {
              "$ref": "#/definitions/String"
            }
          ]
        },
        "schema": {
          "description": "Optional [`polars::prelude::Schema`] to enforce specific datatypes.",
          "anyOf": [
            {
              "$ref": "#/definitions/Schema"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "PlSmallStr": true,
    "Rename": {
      "description": "Rename columns.",
      "oneOf": [
        {
          "description": "Rename using a direct mapping of old names to new.",
          "type": "object",
          "required": [
            "map"
          ],
          "properties": {
            "map": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Schema": true,
    "Select": {
      "description": "Select a series of expressions with applied operations. Wraps [`polars::lazy::prelude::LazyFrame::select`].",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ExpressionChain"
      }
    },
    "Separator": {
      "description": "A valid ASCII CSV separator, represented internally as a [`u8`].",
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "Set": {
      "description": "Add a column with the given expression.",
      "allOf": [
        {
          "$ref": "#/definitions/ExpressionChain"
        }
      ]
    },
    "Sort": {
      "description": "Sort a column ascending or descending.",
      "type": "object",
      "required": [
        "column"
      ],
      "properties": {
        "column": {
          "type": "string"
        },
        "descending": {
          "default": false,
          "type": "boolean"
        }
      }
    },
    "SortBy": {
      "description": "Sort the data by one or more columns.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Sort"
      }
    },
    "Str": {
      "description": "Apply a `str`-namespaced operation.",
      "oneOf": [
        {
          "description": "Convert the string column to lowercase.",
          "type": "string",
          "enum": [
            "to_lowercase"
          ]
        },
        {
          "type": "object",
          "required": [
            "to_date"
          ],
          "properties": {
            "to_date": {
              "$ref": "#/definitions/StrptimeOptions"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "to_date_time"
          ],
          "properties": {
            "to_date_time": {
              "type": "object",
              "required": [
                "ambiguous",
                "options"
              ],
              "properties": {
                "ambiguous": {
                  "$ref": "#/definitions/Ambiguous"
                },
                "options": {
                  "$ref": "#/definitions/StrptimeOptions"
                },
                "time_unit": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/TimeUnit"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "time_zone": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/PlSmallStr"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "replace_all"
          ],
          "properties": {
            "replace_all": {
              "type": "object",
              "required": [
                "literal",
                "pat",
                "value"
              ],
              "properties": {
                "literal": {
                  "type": "boolean"
                },
                "pat": {
                  "type": "string"
                },
                "value": {
                  "$ref": "#/definitions/ExpressionChain"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "json_decode"
          ],
          "properties": {
            "json_decode": {
              "type": "object",
              "properties": {
                "dtype": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/DataType"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "infer_schema_len": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "zfill"
          ],
          "properties": {
            "zfill": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "String": {
      "type": "string"
    },
    "StrptimeOptions": {
      "type": "object",
      "required": [
        "cache",
        "exact",
        "strict"
      ],
      "properties": {
        "cache": {
          "description": "use a cache of unique, converted dates to apply the datetime conversion.",
          "type": "boolean"
        },
        "exact": {
          "description": "If polars may parse matches that not contain the whole string e.g. \"foo-2021-01-01-bar\" could match \"2021-01-01\"",
          "type": "boolean"
        },
        "format": {
          "description": "Formatting string",
          "anyOf": [
            {
              "$ref": "#/definitions/PlSmallStr"
            },
            {
              "type": "null"
            }
          ]
        },
        "strict": {
          "description": "If set then polars will return an error if any date parsing fails",
          "type": "boolean"
        }
      }
    },
    "Struct": {
      "description": "Apply a `struct_`-namespaced operation.",
      "type": "string",
      "enum": [
        "json_encode"
      ]
    },
    "Sub": {
      "$ref": "#/definitions/ExpressionChain"
    },
    "TimeUnit": {
      "type": "string",
      "enum": [
        "Nanoseconds",
        "Microseconds",
        "Milliseconds"
      ]
    },
    "TransformItem": {
      "description": "Available transformations that can be used in configuration files.",
      "oneOf": [
        {
          "description": "Select columns (equivalent to [`LazyFrame::select`])",
          "type": "object",
          "required": [
            "select"
          ],
          "properties": {
            "select": {
              "$ref": "#/definitions/Select"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Drop columns (equivalent to [`LazyFrame::drop`])",
          "type": "object",
          "required": [
            "drop"
          ],
          "properties": {
            "drop": {
              "$ref": "#/definitions/Drop"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Rename columns (equivalent to [`LazyFrame::rename`])",
          "type": "object",
          "required": [
            "rename"
          ],
          "properties": {
            "rename": {
              "$ref": "#/definitions/Rename"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Filter columns (equivalent to [`LazyFrame::filter`])",
          "type": "object",
          "required": [
            "filter"
          ],
          "properties": {
            "filter": {
              "$ref": "#/definitions/Filter"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Extract capture groups of a regex into separate columns.",
          "type": "object",
          "required": [
            "extract"
          ],
          "properties": {
            "extract": {
              "$ref": "#/definitions/Extract"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Apply [`LazyFrame::unnest`] to the given struct columns.",
          "type": "object",
          "required": [
            "unnest"
          ],
          "properties": {
            "unnest": {
              "$ref": "#/definitions/Unnest"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Sort the data by one or more columns.",
          "type": "object",
          "required": [
            "sort_by"
          ],
          "properties": {
            "sort_by": {
              "$ref": "#/definitions/SortBy"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Drop duplicate rows from the dataset.",
          "type": "object",
          "required": [
            "drop_duplicates"
          ],
          "properties": {
            "drop_duplicates": {
              "$ref": "#/definitions/DropDuplicates"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Join the dataset with another dataset.",
          "type": "object",
          "required": [
            "join"
          ],
          "properties": {
            "join": {
              "$ref": "#/definitions/Join"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Set a column to a specific value.",
          "type": "object",
          "required": [
            "set"
          ],
          "properties": {
            "set": {
              "$ref": "#/definitions/Set"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Unnest": {
      "description": "Apply [`polars::lazy::prelude::LazyFrame::unnest`] to the given struct columns.",
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  }
}